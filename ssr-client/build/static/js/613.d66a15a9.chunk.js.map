{"version":3,"file":"static/js/613.d66a15a9.chunk.js","mappings":"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","sources":["store/mainview/addproducts/AddProducts.js"],"sourcesContent":["import { useState, createRef } from \"react\";\nimport axios from 'axios';\nimport {\n    ImageKitAbortError,\n    ImageKitInvalidRequestError,\n    ImageKitServerError,\n    ImageKitUploadNetworkError,\n    upload,\n} from \"@imagekit/react\";\nimport \"./AddProducts.css\";\n\nconst AddProducts = ({url}) => {\n    const [message, setMessage] = useState(\"\");\n\n    // State to keep track of the current upload progress (percentage)\n    const [progress, setProgress] = useState(0);\n\n    const [uploadUrl, setUploadUrl] = useState(0);\n\n    // Create a ref for the file input element to access its files easily\n    const fileInputRef = createRef();\n\n    // Create an AbortController instance to provide an option to cancel the upload if needed.\n    const abortController = new AbortController();\n\n    const showMessage = (msg) => {\n        setMessage(msg);\n    };\n\n    const clearMessage = () => {\n        setMessage(\"\");\n    };\n\n    const authenticator = async () => {\n        try {\n            // Perform the request to the upload authentication endpoint.\n            const response = await fetch(\"/auth\");\n            if (!response.ok) {\n                // If the server response is not successful, extract the error text for debugging.\n                const errorText = await response.text();\n                throw new Error(`Request failed with status ${response.status}: ${errorText}`);\n            }\n\n            // Parse and destructure the response JSON for upload credentials.\n            const data = await response.json();\n            const { signature, expire, token, publicKey } = data;\n            return { signature, expire, token, publicKey };\n        } catch (error) {\n            // Log the original error for debugging before rethrowing a new error.\n            console.error(\"Authentication error:\", error);\n            throw new Error(\"Authentication request failed\");\n        }\n    };\n\n    const saveProduct = () => {\n        const title = document.querySelector('#pTitle').value;\n        const highlights = document.querySelector('#pHighlights').value;\n        const description = document.querySelector('#pDesc').value;\n        const price = document.querySelector('#pPrice').value;\n        const eligibleFor = document.querySelector('#pEligibleFor').options[document.querySelector('#pEligibleFor').selectedIndex].value;\n        const primaryCat = document.querySelector('#pCategory').options[document.querySelector('#pCategory').selectedIndex].value;\n        const thumbnailUrl = uploadUrl;\n        const storeId = JSON.parse(window.sessionStorage.getItem('user-profile')).storeId;\n\n        console.log('--title--', title);\n        console.log('--highlights--', highlights);\n        console.log('--description--', description);\n        console.log('--price--', price);\n        console.log('--eligibleFor--', eligibleFor);\n        console.log('--primaryCat--', primaryCat);\n        console.log('--thumbnailUrl--', thumbnailUrl);\n        \n        axios.post(`/createProduct`, {title: title, highlights: highlights, \n            description: description, price: price, \n            eligibleFor: eligibleFor, primaryCat: primaryCat,\n            thumbnailUrl: thumbnailUrl, storeId: storeId}).then((response) => {\n            console.log('--Create Product Response--', response);\n            setTimeout(()=>{window.location.reload();},500);\n        });       \n        //window.location.reload();\n    };\n\n    const handleUpload = async () => {\n        // Access the file input element using the ref\n        const fileInput = fileInputRef.current;\n        if (!fileInput || !fileInput.files || fileInput.files.length === 0) {\n            alert(\"Please select a file to upload\");\n            return;\n        }\n\n        // Extract the first file from the file input\n        const file = fileInput.files[0];\n\n        // Retrieve authentication parameters for the upload.\n        let authParams;\n        try {\n            authParams = await authenticator();\n        } catch (authError) {\n            console.error(\"Failed to authenticate for upload:\", authError);\n            return;\n        }\n        const { signature, expire, token, publicKey } = authParams;\n\n        // Call the ImageKit SDK upload function with the required parameters and callbacks.\n        try {\n            const uploadResponse = await upload({\n                // Authentication parameters\n                expire,\n                token,\n                signature,\n                publicKey,\n                file,\n                fileName: file.name, // Optionally set a custom file name\n                // Progress callback to update upload progress state\n                onProgress: (event) => {\n                    setProgress((event.loaded / event.total) * 100);\n                },\n                // Abort signal to allow cancellation of the upload if needed.\n                abortSignal: abortController.signal,\n            });\n            setUploadUrl(uploadResponse.url);\n            console.log(\"Upload response:\", uploadResponse);\n        } catch (error) {\n            // Handle specific error types provided by the ImageKit SDK.\n            if (error instanceof ImageKitAbortError) {\n                console.error(\"Upload aborted:\", error.reason);\n            } else if (error instanceof ImageKitInvalidRequestError) {\n                console.error(\"Invalid request:\", error.message);\n            } else if (error instanceof ImageKitUploadNetworkError) {\n                console.error(\"Network error:\", error.message);\n            } else if (error instanceof ImageKitServerError) {\n                console.error(\"Server error:\", error.message);\n            } else {\n                // Handle any other errors that may occur.\n                console.error(\"Upload error:\", error);\n            }\n        }\n    };\n\n\n    return (\n        <div className=\"main\">\n           <div class=\"container\">\n                <h1>Add Product</h1>\n                <input id=\"pTitle\" type=\"text\" placeholder=\"Title\" />\n                <input id=\"pHighlights\" type=\"text\" placeholder=\"Highlights (e.g. type: kidswear, age: 9-10)\" />\n                <textarea id=\"pDesc\" placeholder=\"Description\"></textarea>\n                <input id=\"pPrice\" type=\"number\" placeholder=\"Price\" />\n                \n                <select id=\"pEligibleFor\" >\n                <option disabled selected>Eligible for</option>\n                <option>Online Purchase</option>\n                <option>Online Enquiry</option>\n                <option>Online Booking</option>\n                </select>\n\n                <select id=\"pCategory\">\n                <option selected>Default</option>\n                <option>Season's Special</option>\n                <option>New Arrival</option>\n                </select>\n\n                 {/* File input element using React ref */}\n                    <input type=\"file\" ref={fileInputRef} style={{width: '92%'}} />\n                    {/* Button to trigger the upload process */}\n                    <div className=\"footer-buttons\"><button style={{background: 'linear-gradient(180deg, #595959, #000000)'}} type=\"button\" onClick={handleUpload}>\n                        Upload file\n                    </button>\n                    </div>\n                    <br />\n                    {/* Display the current upload progress */}\n                    Upload progress: <progress value={progress} max={100}></progress>\n            </div>\n\n            <div class=\"footer-buttons\">\n                <button onClick={()=>{saveProduct()}}><span>Save & Add</span><i class=\"fas fa-plus\"></i></button>\n                <button><span>Finish</span><i class=\"fas fa-arrow-right\"></i></button>\n            </div>\n        </div>\n    );\n}\n\nexport default AddProducts;\n"],"names":["_ref","url","message","setMessage","useState","progress","setProgress","uploadUrl","setUploadUrl","fileInputRef","createRef","abortController","AbortController","_jsxs","className","children","class","_jsx","id","type","placeholder","disabled","selected","ref","style","width","background","onClick","async","fileInput","current","files","length","alert","file","authParams","response","fetch","ok","errorText","text","Error","concat","status","data","json","signature","expire","token","publicKey","error","console","authenticator","authError","uploadResponse","upload","fileName","name","onProgress","event","loaded","total","abortSignal","signal","log","ImageKitAbortError","reason","ImageKitInvalidRequestError","ImageKitUploadNetworkError","ImageKitServerError","value","max","saveProduct","title","document","querySelector","highlights","description","price","eligibleFor","options","selectedIndex","primaryCat","thumbnailUrl","storeId","JSON","parse","window","sessionStorage","getItem","axios","then","setTimeout","location","reload"],"sourceRoot":""}