{"ast":null,"code":"\"use client\";\n\n// src/scroll-area.tsx\nimport * as React2 from \"react\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { clamp } from \"@radix-ui/number\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\n// src/use-state-machine.ts\nimport * as React from \"react\";\nfunction useStateMachine(initialState, machine) {\n  return React.useReducer((state, event) => {\n    const nextState = machine[state][event];\n    return nextState !== null && nextState !== void 0 ? nextState : state;\n  }, initialState);\n}\n\n// src/scroll-area.tsx\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar SCROLL_AREA_NAME = \"ScrollArea\";\nvar [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\nvar [ScrollAreaProvider, useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME);\nvar ScrollArea = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    type = \"hover\",\n    dir,\n    scrollHideDelay = 600,\n    ...scrollAreaProps\n  } = props;\n  const [scrollArea, setScrollArea] = React2.useState(null);\n  const [viewport, setViewport] = React2.useState(null);\n  const [content, setContent] = React2.useState(null);\n  const [scrollbarX, setScrollbarX] = React2.useState(null);\n  const [scrollbarY, setScrollbarY] = React2.useState(null);\n  const [cornerWidth, setCornerWidth] = React2.useState(0);\n  const [cornerHeight, setCornerHeight] = React2.useState(0);\n  const [scrollbarXEnabled, setScrollbarXEnabled] = React2.useState(false);\n  const [scrollbarYEnabled, setScrollbarYEnabled] = React2.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, node => setScrollArea(node));\n  const direction = useDirection(dir);\n  return /* @__PURE__ */jsx(ScrollAreaProvider, {\n    scope: __scopeScrollArea,\n    type,\n    dir: direction,\n    scrollHideDelay,\n    scrollArea,\n    viewport,\n    onViewportChange: setViewport,\n    content,\n    onContentChange: setContent,\n    scrollbarX,\n    onScrollbarXChange: setScrollbarX,\n    scrollbarXEnabled,\n    onScrollbarXEnabledChange: setScrollbarXEnabled,\n    scrollbarY,\n    onScrollbarYChange: setScrollbarY,\n    scrollbarYEnabled,\n    onScrollbarYEnabledChange: setScrollbarYEnabled,\n    onCornerWidthChange: setCornerWidth,\n    onCornerHeightChange: setCornerHeight,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      dir: direction,\n      ...scrollAreaProps,\n      ref: composedRefs,\n      style: {\n        position: \"relative\",\n        // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n        [\"--radix-scroll-area-corner-width\"]: cornerWidth + \"px\",\n        [\"--radix-scroll-area-corner-height\"]: cornerHeight + \"px\",\n        ...props.style\n      }\n    })\n  });\n});\nScrollArea.displayName = SCROLL_AREA_NAME;\nvar VIEWPORT_NAME = \"ScrollAreaViewport\";\nvar ScrollAreaViewport = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    children,\n    nonce,\n    ...viewportProps\n  } = props;\n  const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n  const ref = React2.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: \"[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}\"\n      },\n      nonce\n    }), /* @__PURE__ */jsx(Primitive.div, {\n      \"data-radix-scroll-area-viewport\": \"\",\n      ...viewportProps,\n      ref: composedRefs,\n      style: {\n        /**\n         * We don't support `visible` because the intention is to have at least one scrollbar\n         * if this component is used and `visible` will behave like `auto` in that case\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n         *\n         * We don't handle `auto` because the intention is for the native implementation\n         * to be hidden if using this component. We just want to ensure the node is scrollable\n         * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n         * the browser from having to work out whether to render native scrollbars or not,\n         * we tell it to with the intention of hiding them in CSS.\n         */\n        overflowX: context.scrollbarXEnabled ? \"scroll\" : \"hidden\",\n        overflowY: context.scrollbarYEnabled ? \"scroll\" : \"hidden\",\n        ...props.style\n      },\n      children: /* @__PURE__ */jsx(\"div\", {\n        ref: context.onContentChange,\n        style: {\n          minWidth: \"100%\",\n          display: \"table\"\n        },\n        children\n      })\n    })]\n  });\n});\nScrollAreaViewport.displayName = VIEWPORT_NAME;\nvar SCROLLBAR_NAME = \"ScrollAreaScrollbar\";\nvar ScrollAreaScrollbar = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    onScrollbarXEnabledChange,\n    onScrollbarYEnabledChange\n  } = context;\n  const isHorizontal = props.orientation === \"horizontal\";\n  React2.useEffect(() => {\n    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n    return () => {\n      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n    };\n  }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n  return context.type === \"hover\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarHover, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"scroll\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarScroll, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"auto\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarAuto, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"always\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, {\n    ...scrollbarProps,\n    ref: forwardedRef\n  }) : null;\n});\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\nvar ScrollAreaScrollbarHover = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React2.useState(false);\n  React2.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener(\"pointerenter\", handlePointerEnter);\n      scrollArea.addEventListener(\"pointerleave\", handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener(\"pointerenter\", handlePointerEnter);\n        scrollArea.removeEventListener(\"pointerleave\", handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || visible,\n    children: /* @__PURE__ */jsx(ScrollAreaScrollbarAuto, {\n      \"data-state\": visible ? \"visible\" : \"hidden\",\n      ...scrollbarProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar ScrollAreaScrollbarScroll = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === \"horizontal\";\n  const debounceScrollEnd = useDebounceCallback(() => send(\"SCROLL_END\"), 100);\n  const [state, send] = useStateMachine(\"hidden\", {\n    hidden: {\n      SCROLL: \"scrolling\"\n    },\n    scrolling: {\n      SCROLL_END: \"idle\",\n      POINTER_ENTER: \"interacting\"\n    },\n    interacting: {\n      SCROLL: \"interacting\",\n      POINTER_LEAVE: \"idle\"\n    },\n    idle: {\n      HIDE: \"hidden\",\n      SCROLL: \"scrolling\",\n      POINTER_ENTER: \"interacting\"\n    }\n  });\n  React2.useEffect(() => {\n    if (state === \"idle\") {\n      const hideTimer = window.setTimeout(() => send(\"HIDE\"), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n  React2.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send(\"SCROLL\");\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || state !== \"hidden\",\n    children: /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, {\n      \"data-state\": state === \"hidden\" ? \"hidden\" : \"visible\",\n      ...scrollbarProps,\n      ref: forwardedRef,\n      onPointerEnter: composeEventHandlers(props.onPointerEnter, () => send(\"POINTER_ENTER\")),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, () => send(\"POINTER_LEAVE\"))\n    })\n  });\n});\nvar ScrollAreaScrollbarAuto = React2.forwardRef((props, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const [visible, setVisible] = React2.useState(false);\n  const isHorizontal = props.orientation === \"horizontal\";\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || visible,\n    children: /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, {\n      \"data-state\": visible ? \"visible\" : \"hidden\",\n      ...scrollbarProps,\n      ref: forwardedRef\n    })\n  });\n});\nvar ScrollAreaScrollbarVisible = React2.forwardRef((props, forwardedRef) => {\n  const {\n    orientation = \"vertical\",\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React2.useRef(null);\n  const pointerOffsetRef = React2.useRef(0);\n  const [sizes, setSizes] = React2.useState({\n    content: 0,\n    viewport: 0,\n    scrollbar: {\n      size: 0,\n      paddingStart: 0,\n      paddingEnd: 0\n    }\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n  const commonProps = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: thumb => thumbRef.current = thumb,\n    onThumbPointerUp: () => pointerOffsetRef.current = 0,\n    onThumbPointerDown: pointerPos => pointerOffsetRef.current = pointerPos\n  };\n  function getScrollPosition(pointerPos, dir) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n  if (orientation === \"horizontal\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarX, {\n      ...commonProps,\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollLeft;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n          thumbRef.current.style.transform = \"translate3d(\".concat(offset, \"px, 0, 0)\");\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) context.viewport.scrollLeft = scrollPos;\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n        }\n      }\n    });\n  }\n  if (orientation === \"vertical\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarY, {\n      ...commonProps,\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollTop;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n          thumbRef.current.style.transform = \"translate3d(0, \".concat(offset, \"px, 0)\");\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) context.viewport.scrollTop = scrollPos;\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n      }\n    });\n  }\n  return null;\n});\nvar ScrollAreaScrollbarX = React2.forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    onSizesChange,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React2.useState();\n  const ref = React2.useRef(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n  React2.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */jsx(ScrollAreaScrollbarImpl, {\n    \"data-orientation\": \"horizontal\",\n    ...scrollbarProps,\n    ref: composeRefs,\n    sizes,\n    style: {\n      bottom: 0,\n      left: context.dir === \"rtl\" ? \"var(--radix-scroll-area-corner-width)\" : 0,\n      right: context.dir === \"ltr\" ? \"var(--radix-scroll-area-corner-width)\" : 0,\n      [\"--radix-scroll-area-thumb-width\"]: getThumbSize(sizes) + \"px\",\n      ...props.style\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.x),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.x),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollLeft + event.deltaX;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollWidth,\n          viewport: context.viewport.offsetWidth,\n          scrollbar: {\n            size: ref.current.clientWidth,\n            paddingStart: toInt(computedStyle.paddingLeft),\n            paddingEnd: toInt(computedStyle.paddingRight)\n          }\n        });\n      }\n    }\n  });\n});\nvar ScrollAreaScrollbarY = React2.forwardRef((props, forwardedRef) => {\n  const {\n    sizes,\n    onSizesChange,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React2.useState();\n  const ref = React2.useRef(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n  React2.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */jsx(ScrollAreaScrollbarImpl, {\n    \"data-orientation\": \"vertical\",\n    ...scrollbarProps,\n    ref: composeRefs,\n    sizes,\n    style: {\n      top: 0,\n      right: context.dir === \"ltr\" ? 0 : void 0,\n      left: context.dir === \"rtl\" ? 0 : void 0,\n      bottom: \"var(--radix-scroll-area-corner-height)\",\n      [\"--radix-scroll-area-thumb-height\"]: getThumbSize(sizes) + \"px\",\n      ...props.style\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.y),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.y),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollTop + event.deltaY;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollHeight,\n          viewport: context.viewport.offsetHeight,\n          scrollbar: {\n            size: ref.current.clientHeight,\n            paddingStart: toInt(computedStyle.paddingTop),\n            paddingEnd: toInt(computedStyle.paddingBottom)\n          }\n        });\n      }\n    }\n  });\n});\nvar [ScrollbarProvider, useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME);\nvar ScrollAreaScrollbarImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React2.useState(null);\n  const composeRefs = useComposedRefs(forwardedRef, node => setScrollbar(node));\n  const rectRef = React2.useRef(null);\n  const prevWebkitUserSelectRef = React2.useRef(\"\");\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n  function handleDragScroll(event) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x,\n        y\n      });\n    }\n  }\n  React2.useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar === null || scrollbar === void 0 ? void 0 : scrollbar.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  React2.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */jsx(ScrollbarProvider, {\n    scope: __scopeScrollArea,\n    scrollbar,\n    hasThumb,\n    onThumbChange: useCallbackRef(onThumbChange),\n    onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n    onThumbPositionChange: handleThumbPositionChange,\n    onThumbPointerDown: useCallbackRef(onThumbPointerDown),\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      ...scrollbarProps,\n      ref: composeRefs,\n      style: {\n        position: \"absolute\",\n        ...scrollbarProps.style\n      },\n      onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n        const mainPointer = 0;\n        if (event.button === mainPointer) {\n          const element = event.target;\n          element.setPointerCapture(event.pointerId);\n          rectRef.current = scrollbar.getBoundingClientRect();\n          prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n          document.body.style.webkitUserSelect = \"none\";\n          if (context.viewport) context.viewport.style.scrollBehavior = \"auto\";\n          handleDragScroll(event);\n        }\n      }),\n      onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),\n      onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n        const element = event.target;\n        if (element.hasPointerCapture(event.pointerId)) {\n          element.releasePointerCapture(event.pointerId);\n        }\n        document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n        if (context.viewport) context.viewport.style.scrollBehavior = \"\";\n        rectRef.current = null;\n      })\n    })\n  });\n});\nvar THUMB_NAME = \"ScrollAreaThumb\";\nvar ScrollAreaThumb = React2.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...thumbProps\n  } = props;\n  const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || scrollbarContext.hasThumb,\n    children: /* @__PURE__ */jsx(ScrollAreaThumbImpl, {\n      ref: forwardedRef,\n      ...thumbProps\n    })\n  });\n});\nvar ScrollAreaThumbImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    style,\n    ...thumbProps\n  } = props;\n  const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n  const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n  const {\n    onThumbPositionChange\n  } = scrollbarContext;\n  const composedRef = useComposedRefs(forwardedRef, node => scrollbarContext.onThumbChange(node));\n  const removeUnlinkedScrollListenerRef = React2.useRef(void 0);\n  const debounceScrollEnd = useDebounceCallback(() => {\n    if (removeUnlinkedScrollListenerRef.current) {\n      removeUnlinkedScrollListenerRef.current();\n      removeUnlinkedScrollListenerRef.current = void 0;\n    }\n  }, 100);\n  React2.useEffect(() => {\n    const viewport = scrollAreaContext.viewport;\n    if (viewport) {\n      const handleScroll = () => {\n        debounceScrollEnd();\n        if (!removeUnlinkedScrollListenerRef.current) {\n          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n          removeUnlinkedScrollListenerRef.current = listener;\n          onThumbPositionChange();\n        }\n      };\n      onThumbPositionChange();\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"data-state\": scrollbarContext.hasThumb ? \"visible\" : \"hidden\",\n    ...thumbProps,\n    ref: composedRef,\n    style: {\n      width: \"var(--radix-scroll-area-thumb-width)\",\n      height: \"var(--radix-scroll-area-thumb-height)\",\n      ...style\n    },\n    onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, event => {\n      const thumb = event.target;\n      const thumbRect = thumb.getBoundingClientRect();\n      const x = event.clientX - thumbRect.left;\n      const y = event.clientY - thumbRect.top;\n      scrollbarContext.onThumbPointerDown({\n        x,\n        y\n      });\n    }),\n    onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)\n  });\n});\nScrollAreaThumb.displayName = THUMB_NAME;\nvar CORNER_NAME = \"ScrollAreaCorner\";\nvar ScrollAreaCorner = React2.forwardRef((props, forwardedRef) => {\n  const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n  const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n  const hasCorner = context.type !== \"scroll\" && hasBothScrollbarsVisible;\n  return hasCorner ? /* @__PURE__ */jsx(ScrollAreaCornerImpl, {\n    ...props,\n    ref: forwardedRef\n  }) : null;\n});\nScrollAreaCorner.displayName = CORNER_NAME;\nvar ScrollAreaCornerImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    ...cornerProps\n  } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React2.useState(0);\n  const [height, setHeight] = React2.useState(0);\n  const hasSize = Boolean(width && height);\n  useResizeObserver(context.scrollbarX, () => {\n    var _context$scrollbarX;\n    const height2 = ((_context$scrollbarX = context.scrollbarX) === null || _context$scrollbarX === void 0 ? void 0 : _context$scrollbarX.offsetHeight) || 0;\n    context.onCornerHeightChange(height2);\n    setHeight(height2);\n  });\n  useResizeObserver(context.scrollbarY, () => {\n    var _context$scrollbarY;\n    const width2 = ((_context$scrollbarY = context.scrollbarY) === null || _context$scrollbarY === void 0 ? void 0 : _context$scrollbarY.offsetWidth) || 0;\n    context.onCornerWidthChange(width2);\n    setWidth(width2);\n  });\n  return hasSize ? /* @__PURE__ */jsx(Primitive.div, {\n    ...cornerProps,\n    ref: forwardedRef,\n    style: {\n      width,\n      height,\n      position: \"absolute\",\n      right: context.dir === \"ltr\" ? 0 : void 0,\n      left: context.dir === \"rtl\" ? 0 : void 0,\n      bottom: 0,\n      ...props.style\n    }\n  }) : null;\n});\nfunction toInt(value) {\n  return value ? parseInt(value, 10) : 0;\n}\nfunction getThumbRatio(viewportSize, contentSize) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\nfunction getThumbSize(sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  return Math.max(thumbSize, 18);\n}\nfunction getScrollPositionFromPointer(pointerPos, pointerOffset, sizes) {\n  let dir = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"ltr\";\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);\n  return interpolate(pointerPos);\n}\nfunction getThumbOffsetFromScroll(scrollPos, sizes) {\n  let dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"ltr\";\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\nfunction linearScale(input, output) {\n  return value => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\nfunction isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\nvar addUnlinkedScrollListener = function (node) {\n  let handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  let prevPosition = {\n    left: node.scrollLeft,\n    top: node.scrollTop\n  };\n  let rAF = 0;\n  (function loop() {\n    const position = {\n      left: node.scrollLeft,\n      top: node.scrollTop\n    };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\nfunction useDebounceCallback(callback, delay) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React2.useRef(0);\n  React2.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React2.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\nfunction useResizeObserver(element, onResize) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\nvar Root = ScrollArea;\nvar Viewport = ScrollAreaViewport;\nvar Scrollbar = ScrollAreaScrollbar;\nvar Thumb = ScrollAreaThumb;\nvar Corner = ScrollAreaCorner;\nexport { Corner, Root, ScrollArea, ScrollAreaCorner, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport, Scrollbar, Thumb, Viewport, createScrollAreaScope };","map":{"version":3,"names":["React2","Primitive","Presence","createContextScope","useComposedRefs","useCallbackRef","useDirection","useLayoutEffect","clamp","composeEventHandlers","React","useStateMachine","initialState","machine","useReducer","state","event","nextState","Fragment","jsx","jsxs","SCROLL_AREA_NAME","createScrollAreaContext","createScrollAreaScope","ScrollAreaProvider","useScrollAreaContext","ScrollArea","forwardRef","props","forwardedRef","__scopeScrollArea","type","dir","scrollHideDelay","scrollAreaProps","scrollArea","setScrollArea","useState","viewport","setViewport","content","setContent","scrollbarX","setScrollbarX","scrollbarY","setScrollbarY","cornerWidth","setCornerWidth","cornerHeight","setCornerHeight","scrollbarXEnabled","setScrollbarXEnabled","scrollbarYEnabled","setScrollbarYEnabled","composedRefs","node","direction","scope","onViewportChange","onContentChange","onScrollbarXChange","onScrollbarXEnabledChange","onScrollbarYChange","onScrollbarYEnabledChange","onCornerWidthChange","onCornerHeightChange","children","div","ref","style","position","displayName","VIEWPORT_NAME","ScrollAreaViewport","nonce","viewportProps","context","useRef","dangerouslySetInnerHTML","__html","overflowX","overflowY","minWidth","display","SCROLLBAR_NAME","ScrollAreaScrollbar","forceMount","scrollbarProps","isHorizontal","orientation","useEffect","ScrollAreaScrollbarHover","ScrollAreaScrollbarScroll","ScrollAreaScrollbarAuto","ScrollAreaScrollbarVisible","visible","setVisible","hideTimer","handlePointerEnter","window","clearTimeout","handlePointerLeave","setTimeout","addEventListener","removeEventListener","present","debounceScrollEnd","useDebounceCallback","send","hidden","SCROLL","scrolling","SCROLL_END","POINTER_ENTER","interacting","POINTER_LEAVE","idle","HIDE","scrollDirection","prevScrollPos","handleScroll","scrollPos","hasScrollInDirectionChanged","onPointerEnter","onPointerLeave","handleResize","isOverflowX","offsetWidth","scrollWidth","isOverflowY","offsetHeight","scrollHeight","useResizeObserver","thumbRef","pointerOffsetRef","sizes","setSizes","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","current","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","getScrollPositionFromPointer","ScrollAreaScrollbarX","onThumbPositionChange","scrollLeft","offset","getThumbOffsetFromScroll","transform","concat","onWheelScroll","onDragScroll","ScrollAreaScrollbarY","scrollTop","computedStyle","setComputedStyle","composeRefs","getComputedStyle","ScrollAreaScrollbarImpl","bottom","left","right","getThumbSize","x","maxScrollPos","deltaX","isScrollingWithinScrollbarBounds","preventDefault","onResize","clientWidth","toInt","paddingLeft","paddingRight","top","y","deltaY","clientHeight","paddingTop","paddingBottom","ScrollbarProvider","useScrollbarContext","setScrollbar","rectRef","prevWebkitUserSelectRef","handleWheelScroll","handleThumbPositionChange","handleDragScroll","clientX","clientY","handleWheel","element","target","isScrollbarWheel","contains","document","passive","onPointerDown","mainPointer","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","scrollBehavior","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture","THUMB_NAME","ScrollAreaThumb","thumbProps","scrollbarContext","ScrollAreaThumbImpl","scrollAreaContext","composedRef","removeUnlinkedScrollListenerRef","listener","addUnlinkedScrollListener","width","height","onPointerDownCapture","thumbRect","CORNER_NAME","ScrollAreaCorner","hasBothScrollbarsVisible","hasCorner","ScrollAreaCornerImpl","cornerProps","setWidth","setHeight","hasSize","_context$scrollbarX","height2","_context$scrollbarY","width2","value","parseInt","viewportSize","contentSize","ratio","isNaN","scrollbarPadding","thumbSize","Math","max","pointerOffset","arguments","length","undefined","thumbSizePx","thumbCenter","thumbOffsetFromEnd","minPointerPos","maxPointerPos","scrollRange","interpolate","linearScale","maxThumbPos","scrollClampRange","scrollWithoutMomentum","input","output","handler","prevPosition","rAF","loop","isHorizontalScroll","isVerticalScroll","requestAnimationFrame","cancelAnimationFrame","callback","delay","handleCallback","debounceTimerRef","useCallback","resizeObserver","ResizeObserver","observe","unobserve","Root","Viewport","Scrollbar","Thumb","Corner"],"sources":["/Users/srishti/Documents/code/appamz/node_modules/@radix-ui/react-scroll-area/src/scroll-area.tsx","/Users/srishti/Documents/code/appamz/node_modules/@radix-ui/react-scroll-area/src/use-state-machine.ts"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './use-state-machine';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const {\n      __scopeScrollArea,\n      type = 'hover',\n      dir,\n      scrollHideDelay = 600,\n      ...scrollAreaProps\n    } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const direction = useDirection(dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={direction}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          dir={direction}\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ComponentRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends Omit<PrimitiveDivProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            if (context.viewport) context.viewport.style.scrollBehavior = 'auto';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            element.releasePointerCapture(event.pointerId);\n          }\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          if (context.viewport) context.viewport.style.scrollBehavior = '';\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollAreaThumb';\n\ntype ScrollAreaThumbElement = ScrollAreaThumbImplElement;\ninterface ScrollAreaThumbProps extends ScrollAreaThumbImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n    return (\n      <Presence present={forceMount || scrollbarContext.hasThumb}>\n        <ScrollAreaThumbImpl ref={forwardedRef} {...thumbProps} />\n      </Presence>\n    );\n  }\n);\n\ntype ScrollAreaThumbImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaThumbImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumbImpl = React.forwardRef<ScrollAreaThumbImplElement, ScrollAreaThumbImplProps>(\n  (props: ScopedProps<ScrollAreaThumbImplProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>(undefined);\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return (\n      <Primitive.div\n        data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    );\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}