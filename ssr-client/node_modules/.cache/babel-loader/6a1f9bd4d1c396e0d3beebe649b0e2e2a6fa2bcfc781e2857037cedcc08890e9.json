{"ast":null,"code":"// packages/react/context/src/create-context.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createContext2(rootComponentName, defaultContext) {\n  const Context = React.createContext(defaultContext);\n  const Provider = props => {\n    const {\n      children,\n      ...context\n    } = props;\n    const value = React.useMemo(() => context, Object.values(context));\n    return /* @__PURE__ */jsx(Context.Provider, {\n      value,\n      children\n    });\n  };\n  Provider.displayName = rootComponentName + \"Provider\";\n  function useContext2(consumerName) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== void 0) return defaultContext;\n    throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n  }\n  return [Provider, useContext2];\n}\nfunction createContextScope(scopeName) {\n  let createContextScopeDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultContexts = [];\n  function createContext3(rootComponentName, defaultContext) {\n    const BaseContext = React.createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    const Provider = props => {\n      var _scope$scopeName;\n      const {\n        scope,\n        children,\n        ...context\n      } = props;\n      const Context = (scope === null || scope === void 0 || (_scope$scopeName = scope[scopeName]) === null || _scope$scopeName === void 0 ? void 0 : _scope$scopeName[index]) || BaseContext;\n      const value = React.useMemo(() => context, Object.values(context));\n      return /* @__PURE__ */jsx(Context.Provider, {\n        value,\n        children\n      });\n    };\n    Provider.displayName = rootComponentName + \"Provider\";\n    function useContext2(consumerName, scope) {\n      var _scope$scopeName2;\n      const Context = (scope === null || scope === void 0 || (_scope$scopeName2 = scope[scopeName]) === null || _scope$scopeName2 === void 0 ? void 0 : _scope$scopeName2[index]) || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== void 0) return defaultContext;\n      throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n    }\n    return [Provider, useContext2];\n  }\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return React.useMemo(() => ({\n        [\"__scope\".concat(scopeName)]: {\n          ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [createContext3, composeContextScopes(createScope, ...createContextScopeDeps)];\n}\nfunction composeContextScopes() {\n  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++) {\n    scopes[_key] = arguments[_key];\n  }\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope = () => {\n    const scopeHooks = scopes.map(createScope2 => ({\n      useScope: createScope2(),\n      scopeName: createScope2.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes2, _ref) => {\n        let {\n          useScope,\n          scopeName\n        } = _ref;\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[\"__scope\".concat(scopeName)];\n        return {\n          ...nextScopes2,\n          ...currentScope\n        };\n      }, {});\n      return React.useMemo(() => ({\n        [\"__scope\".concat(baseScope.scopeName)]: nextScopes\n      }), [nextScopes]);\n    };\n  };\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\nexport { createContext2 as createContext, createContextScope };","map":{"version":3,"names":["React","jsx","createContext2","rootComponentName","defaultContext","Context","createContext","Provider","props","children","context","value","useMemo","Object","values","displayName","useContext2","consumerName","useContext","Error","concat","createContextScope","scopeName","createContextScopeDeps","arguments","length","undefined","defaultContexts","createContext3","BaseContext","index","_scope$scopeName","scope","_scope$scopeName2","createScope","scopeContexts","map","useScope","contexts","composeContextScopes","_len","scopes","Array","_key","baseScope","scopeHooks","createScope2","useComposedScopes","overrideScopes","nextScopes","reduce","nextScopes2","_ref","scopeProps","currentScope"],"sources":["/Users/srishti/Documents/code/appamz/node_modules/@radix-ui/react-context/src/create-context.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  const Provider: React.FC<ContextValueType & { children: React.ReactNode }> = (props) => {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  };\n\n  Provider.displayName = rootComponentName + 'Provider';\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    const Provider: React.FC<\n      ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    > = (props) => {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName]?.[index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    };\n\n    Provider.displayName = rootComponentName + 'Provider';\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName]?.[index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}